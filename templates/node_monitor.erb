#!/bin/sh

# SLURM runs this HealthCheckProgram on each compute node. If we find a
# problem, drain the node and provide a reason why.

# nhc is in /usr/sbin by default.
export PATH="$PATH:/sbin:/usr/sbin"

drain_node()
{
	local reason=$1
	shift

	hostname=$(hostname -s)

    if [ -z "$(scontrol show node $hostname | grep Reason)" ]; then
        scontrol update nodename="$hostname" state=drain reason="$reason"
    fi
}

# If NHC returns unsuccessfully, there's some problem with this node.
if ! reason=$(timeout -s 9 40s nhc); then
	# Get rid of the leading text and replaces it with NHC:
    # This is needed for the automatic node_online script to work.
	reason=$(echo "$reason" |
		sed 's/^[[:space:]]*ERROR:  nhc:  Health check failed:[^:]\{1,\}:[[:space:]]*//')

    reason=$(echo "NHC: $reason")

	drain_node "$reason"
	exit 0
fi

<% if @check_kernel %>
if [ "$(uname -r)" != "<%= @kernel_release %>" ]; then
	reason="kernel version != <%= @kernel_release %>"
	drain_node "$reason"
	exit 0
fi
<% end %>

<% if @check_centos %>
if [ "$(lsb_release -r -s)" != "<%= @centos_release %>" ]; then
	reason="centos release != <%= @centos_release %>"
	drain_node "$reason"
	exit 0
fi
<% end %>

<% if @lustre_node and @check_lustre %>
if [ "$(rpm --qf '%{version}-%{release}\n' -q lustre-client)" != "<%= @lustre_version %>" ]; then
	reason="lustre-client rpm version != <%= @lustre_version %>"
	drain_node "$reason"
	exit 0
fi

lustre_module_version=$(modinfo -F version lustre)

if [ "$(rpm --qf '%{version}\n' -q lustre-client)" != "${lustre_module_version}" ]; then
	reason="lustre kernel module version != ${lustre_module_version}"
	drain_node "$reason"
	exit 0
fi
<% end %>

# Checking cgroups version
if [ "$(stat -fc %T /sys/fs/cgroup/)" != "cgroup2fs" ]; then
    reason="cgroups is not version 2"
	drain_node "$reason"
	exit 0
fi

# Checking the CPU Frequency is boosting when under load
mhz=$(cat /proc/cpuinfo | grep "cpu MHz" | sort -V | tail -n 1 | cut -d ":" -f 2 | sed 's/ //g')
load=$(cat /proc/loadavg | cut -d " " -f 1)
mhzlimit=1300.0
loadlimit=16.0

if [ $(echo "$load > $loadlimit" | bc) -eq 1 ]
then
	if [ $(echo "$mhz < $mhzlimit" | bc) -eq 1 ]
	then
		reason="cpu running at ${mhz} MHz under load of ${load}"
                drain_node "$reason"
                exit 0
	fi
fi

score=$(scontrol --oneliner show node $(hostname -s) | grep -o 'CPUTot=[^ ]*' | cut -d "=" -f 2)
pcore=$(nproc --all)

if [ $score != $pcore ]
then
        reason="Slurm has a different number of cores defined than the system does"
        drain_node "$reason"
        exit 0
fi

<% if @ib_island == 'holyhdr' or @ib_island == 'holyib' or @ib_island == 'fasse' %>
lnetib=$(lnetctl net show | grep ib)
if [ -z "$lnetib" ]
then
  reason="Node has infiniband but Lustre is not using it"
  drain_node "$reason"
  exit 0
fi

<% if @role == 'role::compute::gpu' %>
gdrinstall=$(rpm -qa | grep gdr)
if [ -n "$gdrinstall" ]
then
  gdrsanity=$(gdrcopy_sanity -t basic_child_thread_pins_buffer_cumemalloc | grep -e "Passed: 1" -e "CUDA_ERROR_OUT_OF_MEMORY")
  if [ -z "$gdrsanity" ]
  then
    reason="GPU Direct RDMA not working"
    drain_node "$reason"
    exit 0
  fi
fi
<% end %>
<% end %>

exit 0

